{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1760012,"sourceType":"datasetVersion","datasetId":1046158}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('../input/crop-recommendation-dataset/Crop_recommendation.csv')\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-01T21:16:45.576207Z","iopub.execute_input":"2024-06-01T21:16:45.576611Z","iopub.status.idle":"2024-06-01T21:16:46.082953Z","shell.execute_reply.started":"2024-06-01T21:16:45.576580Z","shell.execute_reply":"2024-06-01T21:16:46.081815Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"    N   P   K  temperature   humidity        ph    rainfall label\n0  90  42  43    20.879744  82.002744  6.502985  202.935536  rice\n1  85  58  41    21.770462  80.319644  7.038096  226.655537  rice\n2  60  55  44    23.004459  82.320763  7.840207  263.964248  rice\n3  74  35  40    26.491096  80.158363  6.980401  242.864034  rice\n4  78  42  42    20.130175  81.604873  7.628473  262.717340  rice","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>N</th>\n      <th>P</th>\n      <th>K</th>\n      <th>temperature</th>\n      <th>humidity</th>\n      <th>ph</th>\n      <th>rainfall</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>90</td>\n      <td>42</td>\n      <td>43</td>\n      <td>20.879744</td>\n      <td>82.002744</td>\n      <td>6.502985</td>\n      <td>202.935536</td>\n      <td>rice</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>85</td>\n      <td>58</td>\n      <td>41</td>\n      <td>21.770462</td>\n      <td>80.319644</td>\n      <td>7.038096</td>\n      <td>226.655537</td>\n      <td>rice</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>55</td>\n      <td>44</td>\n      <td>23.004459</td>\n      <td>82.320763</td>\n      <td>7.840207</td>\n      <td>263.964248</td>\n      <td>rice</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>74</td>\n      <td>35</td>\n      <td>40</td>\n      <td>26.491096</td>\n      <td>80.158363</td>\n      <td>6.980401</td>\n      <td>242.864034</td>\n      <td>rice</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>78</td>\n      <td>42</td>\n      <td>42</td>\n      <td>20.130175</td>\n      <td>81.604873</td>\n      <td>7.628473</td>\n      <td>262.717340</td>\n      <td>rice</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['label'] = pd.Categorical(df['label']).codes\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:16:47.353379Z","iopub.execute_input":"2024-06-01T21:16:47.354092Z","iopub.status.idle":"2024-06-01T21:16:47.378467Z","shell.execute_reply.started":"2024-06-01T21:16:47.354051Z","shell.execute_reply":"2024-06-01T21:16:47.377253Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"    N   P   K  temperature   humidity        ph    rainfall  label\n0  90  42  43    20.879744  82.002744  6.502985  202.935536     20\n1  85  58  41    21.770462  80.319644  7.038096  226.655537     20\n2  60  55  44    23.004459  82.320763  7.840207  263.964248     20\n3  74  35  40    26.491096  80.158363  6.980401  242.864034     20\n4  78  42  42    20.130175  81.604873  7.628473  262.717340     20","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>N</th>\n      <th>P</th>\n      <th>K</th>\n      <th>temperature</th>\n      <th>humidity</th>\n      <th>ph</th>\n      <th>rainfall</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>90</td>\n      <td>42</td>\n      <td>43</td>\n      <td>20.879744</td>\n      <td>82.002744</td>\n      <td>6.502985</td>\n      <td>202.935536</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>85</td>\n      <td>58</td>\n      <td>41</td>\n      <td>21.770462</td>\n      <td>80.319644</td>\n      <td>7.038096</td>\n      <td>226.655537</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>55</td>\n      <td>44</td>\n      <td>23.004459</td>\n      <td>82.320763</td>\n      <td>7.840207</td>\n      <td>263.964248</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>74</td>\n      <td>35</td>\n      <td>40</td>\n      <td>26.491096</td>\n      <td>80.158363</td>\n      <td>6.980401</td>\n      <td>242.864034</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>78</td>\n      <td>42</td>\n      <td>42</td>\n      <td>20.130175</td>\n      <td>81.604873</td>\n      <td>7.628473</td>\n      <td>262.717340</td>\n      <td>20</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = df.drop(['label'],axis=1).values\ny = df['label'].values\n\nprint(X.shape, y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:16:48.359550Z","iopub.execute_input":"2024-06-01T21:16:48.359966Z","iopub.status.idle":"2024-06-01T21:16:48.370981Z","shell.execute_reply.started":"2024-06-01T21:16:48.359932Z","shell.execute_reply":"2024-06-01T21:16:48.369626Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"(2200, 7) (2200,)\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_raw, y_train, y_raw = train_test_split(X, y, test_size=0.4)\nX_test, X_val, y_test, y_val = train_test_split(X_raw, y_raw, test_size=0.3)\n\nprint('Train', X_train.shape, y_train.shape)\nprint('Test', X_test.shape, y_test.shape)\nprint('Val', X_val.shape, y_val.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:16:49.589156Z","iopub.execute_input":"2024-06-01T21:16:49.589557Z","iopub.status.idle":"2024-06-01T21:16:50.400071Z","shell.execute_reply.started":"2024-06-01T21:16:49.589528Z","shell.execute_reply":"2024-06-01T21:16:50.398712Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Train (1320, 7) (1320,)\nTest (616, 7) (616,)\nVal (264, 7) (264,)\n","output_type":"stream"}]},{"cell_type":"code","source":"import keras\n\ninputs = keras.Input((7,))\n\nx = keras.layers.Reshape((7, 1))(inputs)\nx = keras.layers.LSTM(48)(x)\nx = keras.layers.Dense(24, activation=\"gelu\")(x)\noutputs = keras.layers.Dense(22, activation=\"softmax\")(x)\n\nmodel = keras.Model(inputs, outputs)\nmodel.compile('adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:16:51.162754Z","iopub.execute_input":"2024-06-01T21:16:51.163152Z","iopub.status.idle":"2024-06-01T21:17:06.270899Z","shell.execute_reply.started":"2024-06-01T21:16:51.163122Z","shell.execute_reply":"2024-06-01T21:17:06.269794Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"2024-06-01 21:16:53.581916: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-01 21:16:53.582069: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-01 21:16:53.766094: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ reshape (\u001b[38;5;33mReshape\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m1\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m48\u001b[0m)             │         \u001b[38;5;34m9,600\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m)             │         \u001b[38;5;34m1,176\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m22\u001b[0m)             │           \u001b[38;5;34m550\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ reshape (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Reshape</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">9,600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,176</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">22</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">550</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m11,326\u001b[0m (44.24 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">11,326</span> (44.24 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m11,326\u001b[0m (44.24 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">11,326</span> (44.24 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test));","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:06.273300Z","iopub.execute_input":"2024-06-01T21:17:06.274123Z","iopub.status.idle":"2024-06-01T21:17:25.087976Z","shell.execute_reply.started":"2024-06-01T21:17:06.274083Z","shell.execute_reply":"2024-06-01T21:17:25.086821Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.0604 - loss: 3.0854 - val_accuracy: 0.0990 - val_loss: 3.0050\nEpoch 2/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.1236 - loss: 2.9533 - val_accuracy: 0.2078 - val_loss: 2.7263\nEpoch 3/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.1798 - loss: 2.6767 - val_accuracy: 0.2873 - val_loss: 2.3746\nEpoch 4/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.2826 - loss: 2.2923 - val_accuracy: 0.4464 - val_loss: 2.0283\nEpoch 5/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.4373 - loss: 1.9393 - val_accuracy: 0.5130 - val_loss: 1.6717\nEpoch 6/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.5602 - loss: 1.5484 - val_accuracy: 0.6104 - val_loss: 1.3998\nEpoch 7/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6649 - loss: 1.2964 - val_accuracy: 0.6575 - val_loss: 1.2110\nEpoch 8/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6859 - loss: 1.1341 - val_accuracy: 0.7468 - val_loss: 1.0471\nEpoch 9/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.7611 - loss: 0.9916 - val_accuracy: 0.7354 - val_loss: 0.9282\nEpoch 10/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8029 - loss: 0.8650 - val_accuracy: 0.8003 - val_loss: 0.8244\nEpoch 11/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8314 - loss: 0.7505 - val_accuracy: 0.7890 - val_loss: 0.7295\nEpoch 12/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8390 - loss: 0.6821 - val_accuracy: 0.8182 - val_loss: 0.6682\nEpoch 13/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8408 - loss: 0.6049 - val_accuracy: 0.8344 - val_loss: 0.6005\nEpoch 14/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8820 - loss: 0.5354 - val_accuracy: 0.8750 - val_loss: 0.5345\nEpoch 15/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9061 - loss: 0.4763 - val_accuracy: 0.8912 - val_loss: 0.4925\nEpoch 16/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9139 - loss: 0.4527 - val_accuracy: 0.9010 - val_loss: 0.4810\nEpoch 17/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9282 - loss: 0.4003 - val_accuracy: 0.8912 - val_loss: 0.4270\nEpoch 18/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9161 - loss: 0.3823 - val_accuracy: 0.8961 - val_loss: 0.4056\nEpoch 19/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9440 - loss: 0.3327 - val_accuracy: 0.9123 - val_loss: 0.3717\nEpoch 20/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9554 - loss: 0.2887 - val_accuracy: 0.9416 - val_loss: 0.3228\nEpoch 21/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9335 - loss: 0.3009 - val_accuracy: 0.9318 - val_loss: 0.3124\nEpoch 22/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9569 - loss: 0.2445 - val_accuracy: 0.9383 - val_loss: 0.2781\nEpoch 23/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9617 - loss: 0.2330 - val_accuracy: 0.9416 - val_loss: 0.2573\nEpoch 24/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9603 - loss: 0.2218 - val_accuracy: 0.9513 - val_loss: 0.2321\nEpoch 25/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9608 - loss: 0.1952 - val_accuracy: 0.9643 - val_loss: 0.2149\nEpoch 26/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9755 - loss: 0.1785 - val_accuracy: 0.9675 - val_loss: 0.1902\nEpoch 27/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9741 - loss: 0.1537 - val_accuracy: 0.9675 - val_loss: 0.1798\nEpoch 28/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9652 - loss: 0.1484 - val_accuracy: 0.9740 - val_loss: 0.1583\nEpoch 29/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9779 - loss: 0.1383 - val_accuracy: 0.9594 - val_loss: 0.1805\nEpoch 30/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9590 - loss: 0.1551 - val_accuracy: 0.9659 - val_loss: 0.1562\nEpoch 31/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9831 - loss: 0.1128 - val_accuracy: 0.9805 - val_loss: 0.1300\nEpoch 32/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9787 - loss: 0.1091 - val_accuracy: 0.9610 - val_loss: 0.1360\nEpoch 33/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9806 - loss: 0.1076 - val_accuracy: 0.9740 - val_loss: 0.1256\nEpoch 34/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9858 - loss: 0.0892 - val_accuracy: 0.9724 - val_loss: 0.1277\nEpoch 35/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9812 - loss: 0.0912 - val_accuracy: 0.9692 - val_loss: 0.1147\nEpoch 36/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9874 - loss: 0.0817 - val_accuracy: 0.9708 - val_loss: 0.1157\nEpoch 37/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9898 - loss: 0.0778 - val_accuracy: 0.9724 - val_loss: 0.1096\nEpoch 38/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9791 - loss: 0.0882 - val_accuracy: 0.9675 - val_loss: 0.1262\nEpoch 39/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9843 - loss: 0.0808 - val_accuracy: 0.9708 - val_loss: 0.1042\nEpoch 40/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.9897 - loss: 0.0622 - val_accuracy: 0.9740 - val_loss: 0.0965\nEpoch 41/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9831 - loss: 0.0678 - val_accuracy: 0.9773 - val_loss: 0.0968\nEpoch 42/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9892 - loss: 0.0628 - val_accuracy: 0.9789 - val_loss: 0.0861\nEpoch 43/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9872 - loss: 0.0644 - val_accuracy: 0.9724 - val_loss: 0.1034\nEpoch 44/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9900 - loss: 0.0616 - val_accuracy: 0.9497 - val_loss: 0.1348\nEpoch 45/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9858 - loss: 0.0716 - val_accuracy: 0.9497 - val_loss: 0.1521\nEpoch 46/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9761 - loss: 0.0875 - val_accuracy: 0.9627 - val_loss: 0.1064\nEpoch 47/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9923 - loss: 0.0532 - val_accuracy: 0.9773 - val_loss: 0.0822\nEpoch 48/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9843 - loss: 0.0544 - val_accuracy: 0.9708 - val_loss: 0.0906\nEpoch 49/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9766 - loss: 0.0633 - val_accuracy: 0.9724 - val_loss: 0.0967\nEpoch 50/50\n\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9878 - loss: 0.0571 - val_accuracy: 0.9789 - val_loss: 0.0771\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred = keras.ops.argmax(model.predict(X_val), 1)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:25.089361Z","iopub.execute_input":"2024-06-01T21:17:25.089713Z","iopub.status.idle":"2024-06-01T21:17:25.551469Z","shell.execute_reply.started":"2024-06-01T21:17:25.089684Z","shell.execute_reply":"2024-06-01T21:17:25.550271Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\n\naccuracy = accuracy_score(y_val, y_pred)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:25.556069Z","iopub.execute_input":"2024-06-01T21:17:25.557003Z","iopub.status.idle":"2024-06-01T21:17:25.564127Z","shell.execute_reply.started":"2024-06-01T21:17:25.556967Z","shell.execute_reply":"2024-06-01T21:17:25.562846Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Accuracy: 97.73%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(classification_report(y_val, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:30.320147Z","iopub.execute_input":"2024-06-01T21:17:30.320530Z","iopub.status.idle":"2024-06-01T21:17:30.341573Z","shell.execute_reply.started":"2024-06-01T21:17:30.320502Z","shell.execute_reply":"2024-06-01T21:17:30.340424Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        11\n           1       1.00      1.00      1.00        15\n           2       1.00      1.00      1.00        15\n           3       1.00      1.00      1.00        16\n           4       1.00      1.00      1.00         8\n           5       1.00      1.00      1.00        11\n           6       0.94      1.00      0.97        17\n           7       1.00      1.00      1.00        11\n           8       0.79      0.85      0.81        13\n           9       1.00      1.00      1.00        11\n          10       1.00      1.00      1.00        12\n          11       1.00      0.92      0.96        13\n          12       1.00      1.00      1.00         8\n          13       1.00      1.00      1.00        10\n          14       1.00      1.00      1.00        17\n          15       1.00      1.00      1.00        10\n          16       1.00      1.00      1.00         9\n          17       1.00      1.00      1.00        12\n          18       1.00      1.00      1.00        10\n          19       1.00      1.00      1.00         7\n          20       0.83      0.77      0.80        13\n          21       1.00      1.00      1.00        15\n\n    accuracy                           0.98       264\n   macro avg       0.98      0.98      0.98       264\nweighted avg       0.98      0.98      0.98       264\n\n","output_type":"stream"}]},{"cell_type":"code","source":"model.save('crop_recommendation_model.h5')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:27:12.331990Z","iopub.execute_input":"2024-06-01T21:27:12.332430Z","iopub.status.idle":"2024-06-01T21:27:12.353424Z","shell.execute_reply.started":"2024-06-01T21:27:12.332397Z","shell.execute_reply":"2024-06-01T21:27:12.352274Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Example new data point (replace with your actual data)\n# The features should match the order and preprocessing of the training data\nnew_data = np.array([[90, 42, 43, 20.879744, 82.002744, 6.502985, 203.912978]])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:36.391900Z","iopub.execute_input":"2024-06-01T21:17:36.392306Z","iopub.status.idle":"2024-06-01T21:17:36.398219Z","shell.execute_reply.started":"2024-06-01T21:17:36.392274Z","shell.execute_reply":"2024-06-01T21:17:36.397261Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Make predictions\npredictions = model.predict(new_data)\n\n# Convert predictions to class labels\npredicted_classes = keras.ops.argmax(predictions, axis=1)\n\n# Print the predicted classes\nprint(predicted_classes.numpy())\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:17:38.996009Z","iopub.execute_input":"2024-06-01T21:17:38.996974Z","iopub.status.idle":"2024-06-01T21:17:39.079433Z","shell.execute_reply.started":"2024-06-01T21:17:38.996937Z","shell.execute_reply":"2024-06-01T21:17:39.078255Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n[20]\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom keras.models import load_model\n\n# Load the dataset to get the label mappings\ndf = pd.read_csv('../input/crop-recommendation-dataset/Crop_recommendation.csv')\nunique_labels = df['label'].unique()\nlabel_mapping = {index: label for index, label in enumerate(unique_labels)}\n\n# Load the saved model\nmodel = load_model('crop_recommendation_model.h5')\n\n# Example new data point (replace with your actual data)\nnew_data = np.array([[0, 2, 400, 200.879744, 266.002744, 90.502985, 0.912978]])\n\n# Make predictions\npredictions = model.predict(new_data)\npredicted_classes = keras.ops.argmax(predictions, axis=1)\n\n# Get the predicted crop name\npredicted_crop = label_mapping[predicted_classes.numpy()[0]]\nprint(f\"The recommended crop is: {predicted_crop}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:18:33.769212Z","iopub.execute_input":"2024-06-01T21:18:33.769654Z","iopub.status.idle":"2024-06-01T21:18:34.072796Z","shell.execute_reply.started":"2024-06-01T21:18:33.769621Z","shell.execute_reply":"2024-06-01T21:18:34.071838Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 187ms/step\nThe recommended crop is: apple\n","output_type":"stream"}]},{"cell_type":"code","source":"model.save('models/crop_recommendation_model.h5')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:27:20.104187Z","iopub.execute_input":"2024-06-01T21:27:20.104663Z","iopub.status.idle":"2024-06-01T21:27:20.125414Z","shell.execute_reply.started":"2024-06-01T21:27:20.104629Z","shell.execute_reply":"2024-06-01T21:27:20.123940Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Import necessary libraries\nfrom keras.models import load_model\nimport os\n\n# Assuming you have already trained your model and stored it in the variable 'model'\n\n# Check if 'models' directory exists, if not create it\nif not os.path.exists(r'C:\\Users\\sanja\\Downloads\\models\\input'):\n    os.makedirs(r'C:\\Users\\sanja\\Downloads\\models\\input')\n\n# Save the model\nmodel.save(r'C:\\Users\\sanja\\Downloads\\models\\input\\crop_recommendation_model.h5')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T21:31:52.745025Z","iopub.execute_input":"2024-06-01T21:31:52.745415Z","iopub.status.idle":"2024-06-01T21:31:52.766904Z","shell.execute_reply.started":"2024-06-01T21:31:52.745386Z","shell.execute_reply":"2024-06-01T21:31:52.765710Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}